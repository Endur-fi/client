[
  {
    "name": "ExternalImpl",
    "type": "impl",
    "interface_name": "strkfarm_contracts::strategies::cl_vault::interface::IClVault"
  },
  {
    "name": "core::integer::u256",
    "type": "struct",
    "members": [
      {
        "name": "low",
        "type": "core::integer::u128"
      },
      {
        "name": "high",
        "type": "core::integer::u128"
      }
    ]
  },
  {
    "name": "strkfarm_contracts::strategies::cl_vault::interface::MyPosition",
    "type": "struct",
    "members": [
      {
        "name": "liquidity",
        "type": "core::integer::u256"
      },
      {
        "name": "amount0",
        "type": "core::integer::u256"
      },
      {
        "name": "amount1",
        "type": "core::integer::u256"
      }
    ]
  },
  {
    "name": "core::bool",
    "type": "enum",
    "variants": [
      {
        "name": "False",
        "type": "()"
      },
      {
        "name": "True",
        "type": "()"
      }
    ]
  },
  {
    "name": "ekubo::types::i129::i129",
    "type": "struct",
    "members": [
      {
        "name": "mag",
        "type": "core::integer::u128"
      },
      {
        "name": "sign",
        "type": "core::bool"
      }
    ]
  },
  {
    "name": "strkfarm_contracts::interfaces::IEkuboCore::Bounds",
    "type": "struct",
    "members": [
      {
        "name": "lower",
        "type": "ekubo::types::i129::i129"
      },
      {
        "name": "upper",
        "type": "ekubo::types::i129::i129"
      }
    ]
  },
  {
    "name": "strkfarm_contracts::interfaces::IEkuboCore::PositionKey",
    "type": "struct",
    "members": [
      {
        "name": "salt",
        "type": "core::integer::u64"
      },
      {
        "name": "owner",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "name": "bounds",
        "type": "strkfarm_contracts::interfaces::IEkuboCore::Bounds"
      }
    ]
  },
  {
    "name": "ekubo::types::fees_per_liquidity::FeesPerLiquidity",
    "type": "struct",
    "members": [
      {
        "name": "value0",
        "type": "core::felt252"
      },
      {
        "name": "value1",
        "type": "core::felt252"
      }
    ]
  },
  {
    "name": "ekubo::types::position::Position",
    "type": "struct",
    "members": [
      {
        "name": "liquidity",
        "type": "core::integer::u128"
      },
      {
        "name": "fees_per_liquidity_inside_last",
        "type": "ekubo::types::fees_per_liquidity::FeesPerLiquidity"
      }
    ]
  },
  {
    "name": "strkfarm_contracts::interfaces::IEkuboDistributor::Claim",
    "type": "struct",
    "members": [
      {
        "name": "id",
        "type": "core::integer::u64"
      },
      {
        "name": "claimee",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "name": "amount",
        "type": "core::integer::u128"
      }
    ]
  },
  {
    "name": "core::array::Span::<core::felt252>",
    "type": "struct",
    "members": [
      {
        "name": "snapshot",
        "type": "@core::array::Array::<core::felt252>"
      }
    ]
  },
  {
    "name": "strkfarm_contracts::components::swap::Route",
    "type": "struct",
    "members": [
      {
        "name": "token_from",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "name": "token_to",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "name": "exchange_address",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "name": "percent",
        "type": "core::integer::u128"
      },
      {
        "name": "additional_swap_params",
        "type": "core::array::Array::<core::felt252>"
      }
    ]
  },
  {
    "name": "strkfarm_contracts::components::swap::AvnuMultiRouteSwap",
    "type": "struct",
    "members": [
      {
        "name": "token_from_address",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "name": "token_from_amount",
        "type": "core::integer::u256"
      },
      {
        "name": "token_to_address",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "name": "token_to_amount",
        "type": "core::integer::u256"
      },
      {
        "name": "token_to_min_amount",
        "type": "core::integer::u256"
      },
      {
        "name": "beneficiary",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "name": "integrator_fee_amount_bps",
        "type": "core::integer::u128"
      },
      {
        "name": "integrator_fee_recipient",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "name": "routes",
        "type": "core::array::Array::<strkfarm_contracts::components::swap::Route>"
      }
    ]
  },
  {
    "name": "strkfarm_contracts::interfaces::IEkuboCore::PoolKey",
    "type": "struct",
    "members": [
      {
        "name": "token0",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "name": "token1",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "name": "fee",
        "type": "core::integer::u128"
      },
      {
        "name": "tick_spacing",
        "type": "core::integer::u128"
      },
      {
        "name": "extension",
        "type": "core::starknet::contract_address::ContractAddress"
      }
    ]
  },
  {
    "name": "strkfarm_contracts::strategies::cl_vault::interface::FeeSettings",
    "type": "struct",
    "members": [
      {
        "name": "fee_bps",
        "type": "core::integer::u256"
      },
      {
        "name": "fee_collector",
        "type": "core::starknet::contract_address::ContractAddress"
      }
    ]
  },
  {
    "name": "strkfarm_contracts::strategies::cl_vault::interface::ClSettings",
    "type": "struct",
    "members": [
      {
        "name": "ekubo_positions_contract",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "name": "bounds_settings",
        "type": "strkfarm_contracts::interfaces::IEkuboCore::Bounds"
      },
      {
        "name": "pool_key",
        "type": "strkfarm_contracts::interfaces::IEkuboCore::PoolKey"
      },
      {
        "name": "ekubo_positions_nft",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "name": "contract_nft_id",
        "type": "core::integer::u64"
      },
      {
        "name": "ekubo_core",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "name": "oracle",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "name": "fee_settings",
        "type": "strkfarm_contracts::strategies::cl_vault::interface::FeeSettings"
      }
    ]
  },
  {
    "name": "strkfarm_contracts::strategies::cl_vault::interface::IClVault",
    "type": "interface",
    "items": [
      {
        "name": "deposit",
        "type": "function",
        "inputs": [
          {
            "name": "amount0",
            "type": "core::integer::u256"
          },
          {
            "name": "amount1",
            "type": "core::integer::u256"
          },
          {
            "name": "receiver",
            "type": "core::starknet::contract_address::ContractAddress"
          }
        ],
        "outputs": [
          {
            "type": "core::integer::u256"
          }
        ],
        "state_mutability": "external"
      },
      {
        "name": "withdraw",
        "type": "function",
        "inputs": [
          {
            "name": "shares",
            "type": "core::integer::u256"
          },
          {
            "name": "receiver",
            "type": "core::starknet::contract_address::ContractAddress"
          }
        ],
        "outputs": [
          {
            "type": "strkfarm_contracts::strategies::cl_vault::interface::MyPosition"
          }
        ],
        "state_mutability": "external"
      },
      {
        "name": "convert_to_shares",
        "type": "function",
        "inputs": [
          {
            "name": "amount0",
            "type": "core::integer::u256"
          },
          {
            "name": "amount1",
            "type": "core::integer::u256"
          }
        ],
        "outputs": [
          {
            "type": "core::integer::u256"
          }
        ],
        "state_mutability": "view"
      },
      {
        "name": "convert_to_assets",
        "type": "function",
        "inputs": [
          {
            "name": "shares",
            "type": "core::integer::u256"
          }
        ],
        "outputs": [
          {
            "type": "strkfarm_contracts::strategies::cl_vault::interface::MyPosition"
          }
        ],
        "state_mutability": "view"
      },
      {
        "name": "total_liquidity",
        "type": "function",
        "inputs": [],
        "outputs": [
          {
            "type": "core::integer::u256"
          }
        ],
        "state_mutability": "view"
      },
      {
        "name": "get_position_key",
        "type": "function",
        "inputs": [],
        "outputs": [
          {
            "type": "strkfarm_contracts::interfaces::IEkuboCore::PositionKey"
          }
        ],
        "state_mutability": "view"
      },
      {
        "name": "get_position",
        "type": "function",
        "inputs": [],
        "outputs": [
          {
            "type": "ekubo::types::position::Position"
          }
        ],
        "state_mutability": "view"
      },
      {
        "name": "handle_fees",
        "type": "function",
        "inputs": [],
        "outputs": [],
        "state_mutability": "external"
      },
      {
        "name": "harvest",
        "type": "function",
        "inputs": [
          {
            "name": "rewardsContract",
            "type": "core::starknet::contract_address::ContractAddress"
          },
          {
            "name": "claim",
            "type": "strkfarm_contracts::interfaces::IEkuboDistributor::Claim"
          },
          {
            "name": "proof",
            "type": "core::array::Span::<core::felt252>"
          },
          {
            "name": "swapInfo1",
            "type": "strkfarm_contracts::components::swap::AvnuMultiRouteSwap"
          },
          {
            "name": "swapInfo2",
            "type": "strkfarm_contracts::components::swap::AvnuMultiRouteSwap"
          }
        ],
        "outputs": [],
        "state_mutability": "external"
      },
      {
        "name": "get_settings",
        "type": "function",
        "inputs": [],
        "outputs": [
          {
            "type": "strkfarm_contracts::strategies::cl_vault::interface::ClSettings"
          }
        ],
        "state_mutability": "view"
      },
      {
        "name": "handle_unused",
        "type": "function",
        "inputs": [
          {
            "name": "swap_params",
            "type": "strkfarm_contracts::components::swap::AvnuMultiRouteSwap"
          }
        ],
        "outputs": [],
        "state_mutability": "external"
      },
      {
        "name": "rebalance",
        "type": "function",
        "inputs": [
          {
            "name": "new_bounds",
            "type": "strkfarm_contracts::interfaces::IEkuboCore::Bounds"
          },
          {
            "name": "swap_params",
            "type": "strkfarm_contracts::components::swap::AvnuMultiRouteSwap"
          }
        ],
        "outputs": [],
        "state_mutability": "external"
      },
      {
        "name": "set_settings",
        "type": "function",
        "inputs": [
          {
            "name": "fee_settings",
            "type": "strkfarm_contracts::strategies::cl_vault::interface::FeeSettings"
          }
        ],
        "outputs": [],
        "state_mutability": "external"
      },
      {
        "name": "set_incentives_off",
        "type": "function",
        "inputs": [],
        "outputs": [],
        "state_mutability": "external"
      }
    ]
  },
  {
    "name": "VesuERC20Impl",
    "type": "impl",
    "interface_name": "openzeppelin_token::erc20::interface::IERC20Mixin"
  },
  {
    "name": "core::byte_array::ByteArray",
    "type": "struct",
    "members": [
      {
        "name": "data",
        "type": "core::array::Array::<core::bytes_31::bytes31>"
      },
      {
        "name": "pending_word",
        "type": "core::felt252"
      },
      {
        "name": "pending_word_len",
        "type": "core::integer::u32"
      }
    ]
  },
  {
    "name": "openzeppelin_token::erc20::interface::IERC20Mixin",
    "type": "interface",
    "items": [
      {
        "name": "total_supply",
        "type": "function",
        "inputs": [],
        "outputs": [
          {
            "type": "core::integer::u256"
          }
        ],
        "state_mutability": "view"
      },
      {
        "name": "balance_of",
        "type": "function",
        "inputs": [
          {
            "name": "account",
            "type": "core::starknet::contract_address::ContractAddress"
          }
        ],
        "outputs": [
          {
            "type": "core::integer::u256"
          }
        ],
        "state_mutability": "view"
      },
      {
        "name": "allowance",
        "type": "function",
        "inputs": [
          {
            "name": "owner",
            "type": "core::starknet::contract_address::ContractAddress"
          },
          {
            "name": "spender",
            "type": "core::starknet::contract_address::ContractAddress"
          }
        ],
        "outputs": [
          {
            "type": "core::integer::u256"
          }
        ],
        "state_mutability": "view"
      },
      {
        "name": "transfer",
        "type": "function",
        "inputs": [
          {
            "name": "recipient",
            "type": "core::starknet::contract_address::ContractAddress"
          },
          {
            "name": "amount",
            "type": "core::integer::u256"
          }
        ],
        "outputs": [
          {
            "type": "core::bool"
          }
        ],
        "state_mutability": "external"
      },
      {
        "name": "transfer_from",
        "type": "function",
        "inputs": [
          {
            "name": "sender",
            "type": "core::starknet::contract_address::ContractAddress"
          },
          {
            "name": "recipient",
            "type": "core::starknet::contract_address::ContractAddress"
          },
          {
            "name": "amount",
            "type": "core::integer::u256"
          }
        ],
        "outputs": [
          {
            "type": "core::bool"
          }
        ],
        "state_mutability": "external"
      },
      {
        "name": "approve",
        "type": "function",
        "inputs": [
          {
            "name": "spender",
            "type": "core::starknet::contract_address::ContractAddress"
          },
          {
            "name": "amount",
            "type": "core::integer::u256"
          }
        ],
        "outputs": [
          {
            "type": "core::bool"
          }
        ],
        "state_mutability": "external"
      },
      {
        "name": "name",
        "type": "function",
        "inputs": [],
        "outputs": [
          {
            "type": "core::byte_array::ByteArray"
          }
        ],
        "state_mutability": "view"
      },
      {
        "name": "symbol",
        "type": "function",
        "inputs": [],
        "outputs": [
          {
            "type": "core::byte_array::ByteArray"
          }
        ],
        "state_mutability": "view"
      },
      {
        "name": "decimals",
        "type": "function",
        "inputs": [],
        "outputs": [
          {
            "type": "core::integer::u8"
          }
        ],
        "state_mutability": "view"
      },
      {
        "name": "totalSupply",
        "type": "function",
        "inputs": [],
        "outputs": [
          {
            "type": "core::integer::u256"
          }
        ],
        "state_mutability": "view"
      },
      {
        "name": "balanceOf",
        "type": "function",
        "inputs": [
          {
            "name": "account",
            "type": "core::starknet::contract_address::ContractAddress"
          }
        ],
        "outputs": [
          {
            "type": "core::integer::u256"
          }
        ],
        "state_mutability": "view"
      },
      {
        "name": "transferFrom",
        "type": "function",
        "inputs": [
          {
            "name": "sender",
            "type": "core::starknet::contract_address::ContractAddress"
          },
          {
            "name": "recipient",
            "type": "core::starknet::contract_address::ContractAddress"
          },
          {
            "name": "amount",
            "type": "core::integer::u256"
          }
        ],
        "outputs": [
          {
            "type": "core::bool"
          }
        ],
        "state_mutability": "external"
      }
    ]
  },
  {
    "name": "RewardShareImpl",
    "type": "impl",
    "interface_name": "strkfarm_contracts::components::harvester::reward_shares::IRewardShare"
  },
  {
    "name": "strkfarm_contracts::components::harvester::reward_shares::UserRewardsInfo",
    "type": "struct",
    "members": [
      {
        "name": "pending_round_points",
        "type": "core::integer::u128"
      },
      {
        "name": "shares_owned",
        "type": "core::integer::u128"
      },
      {
        "name": "block_number",
        "type": "core::integer::u64"
      },
      {
        "name": "index",
        "type": "core::integer::u32"
      }
    ]
  },
  {
    "name": "strkfarm_contracts::components::harvester::reward_shares::RewardsInfo",
    "type": "struct",
    "members": [
      {
        "name": "amount",
        "type": "core::integer::u128"
      },
      {
        "name": "shares",
        "type": "core::integer::u128"
      },
      {
        "name": "total_round_points",
        "type": "core::integer::u128"
      },
      {
        "name": "block_number",
        "type": "core::integer::u64"
      }
    ]
  },
  {
    "name": "strkfarm_contracts::components::harvester::reward_shares::IRewardShare",
    "type": "interface",
    "items": [
      {
        "name": "get_user_reward_info",
        "type": "function",
        "inputs": [
          {
            "name": "user",
            "type": "core::starknet::contract_address::ContractAddress"
          }
        ],
        "outputs": [
          {
            "type": "strkfarm_contracts::components::harvester::reward_shares::UserRewardsInfo"
          }
        ],
        "state_mutability": "view"
      },
      {
        "name": "get_rewards_info",
        "type": "function",
        "inputs": [
          {
            "name": "index",
            "type": "core::integer::u32"
          }
        ],
        "outputs": [
          {
            "type": "strkfarm_contracts::components::harvester::reward_shares::RewardsInfo"
          }
        ],
        "state_mutability": "view"
      },
      {
        "name": "get_total_rewards",
        "type": "function",
        "inputs": [],
        "outputs": [
          {
            "type": "core::integer::u32"
          }
        ],
        "state_mutability": "view"
      },
      {
        "name": "get_total_unminted_shares",
        "type": "function",
        "inputs": [],
        "outputs": [
          {
            "type": "core::integer::u128"
          }
        ],
        "state_mutability": "view"
      },
      {
        "name": "get_additional_shares",
        "type": "function",
        "inputs": [
          {
            "name": "user",
            "type": "core::starknet::contract_address::ContractAddress"
          }
        ],
        "outputs": [
          {
            "type": "(core::integer::u128, core::integer::u64, core::integer::u128)"
          }
        ],
        "state_mutability": "view"
      }
    ]
  },
  {
    "name": "CommonCompImpl",
    "type": "impl",
    "interface_name": "strkfarm_contracts::interfaces::common::ICommon"
  },
  {
    "name": "strkfarm_contracts::interfaces::common::ICommon",
    "type": "interface",
    "items": [
      {
        "name": "upgrade",
        "type": "function",
        "inputs": [
          {
            "name": "new_class",
            "type": "core::starknet::class_hash::ClassHash"
          }
        ],
        "outputs": [],
        "state_mutability": "external"
      },
      {
        "name": "pause",
        "type": "function",
        "inputs": [],
        "outputs": [],
        "state_mutability": "external"
      },
      {
        "name": "unpause",
        "type": "function",
        "inputs": [],
        "outputs": [],
        "state_mutability": "external"
      },
      {
        "name": "is_paused",
        "type": "function",
        "inputs": [],
        "outputs": [
          {
            "type": "core::bool"
          }
        ],
        "state_mutability": "view"
      },
      {
        "name": "access_control",
        "type": "function",
        "inputs": [],
        "outputs": [
          {
            "type": "core::starknet::contract_address::ContractAddress"
          }
        ],
        "state_mutability": "view"
      }
    ]
  },
  {
    "name": "constructor",
    "type": "constructor",
    "inputs": [
      {
        "name": "name",
        "type": "core::byte_array::ByteArray"
      },
      {
        "name": "symbol",
        "type": "core::byte_array::ByteArray"
      },
      {
        "name": "access_control",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "name": "ekubo_positions_contract",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "name": "bounds_settings",
        "type": "strkfarm_contracts::interfaces::IEkuboCore::Bounds"
      },
      {
        "name": "pool_key",
        "type": "strkfarm_contracts::interfaces::IEkuboCore::PoolKey"
      },
      {
        "name": "ekubo_positions_nft",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "name": "ekubo_core",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "name": "oracle",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "name": "fee_settings",
        "type": "strkfarm_contracts::strategies::cl_vault::interface::FeeSettings"
      }
    ]
  },
  {
    "kind": "enum",
    "name": "openzeppelin_security::reentrancyguard::ReentrancyGuardComponent::Event",
    "type": "event",
    "variants": []
  },
  {
    "kind": "struct",
    "name": "openzeppelin_token::erc20::erc20::ERC20Component::Transfer",
    "type": "event",
    "members": [
      {
        "kind": "key",
        "name": "from",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "kind": "key",
        "name": "to",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "kind": "data",
        "name": "value",
        "type": "core::integer::u256"
      }
    ]
  },
  {
    "kind": "struct",
    "name": "openzeppelin_token::erc20::erc20::ERC20Component::Approval",
    "type": "event",
    "members": [
      {
        "kind": "key",
        "name": "owner",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "kind": "key",
        "name": "spender",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "kind": "data",
        "name": "value",
        "type": "core::integer::u256"
      }
    ]
  },
  {
    "kind": "enum",
    "name": "openzeppelin_token::erc20::erc20::ERC20Component::Event",
    "type": "event",
    "variants": [
      {
        "kind": "nested",
        "name": "Transfer",
        "type": "openzeppelin_token::erc20::erc20::ERC20Component::Transfer"
      },
      {
        "kind": "nested",
        "name": "Approval",
        "type": "openzeppelin_token::erc20::erc20::ERC20Component::Approval"
      }
    ]
  },
  {
    "kind": "enum",
    "name": "openzeppelin_introspection::src5::SRC5Component::Event",
    "type": "event",
    "variants": []
  },
  {
    "kind": "struct",
    "name": "openzeppelin_upgrades::upgradeable::UpgradeableComponent::Upgraded",
    "type": "event",
    "members": [
      {
        "kind": "data",
        "name": "class_hash",
        "type": "core::starknet::class_hash::ClassHash"
      }
    ]
  },
  {
    "kind": "enum",
    "name": "openzeppelin_upgrades::upgradeable::UpgradeableComponent::Event",
    "type": "event",
    "variants": [
      {
        "kind": "nested",
        "name": "Upgraded",
        "type": "openzeppelin_upgrades::upgradeable::UpgradeableComponent::Upgraded"
      }
    ]
  },
  {
    "kind": "struct",
    "name": "openzeppelin_security::pausable::PausableComponent::Paused",
    "type": "event",
    "members": [
      {
        "kind": "data",
        "name": "account",
        "type": "core::starknet::contract_address::ContractAddress"
      }
    ]
  },
  {
    "kind": "struct",
    "name": "openzeppelin_security::pausable::PausableComponent::Unpaused",
    "type": "event",
    "members": [
      {
        "kind": "data",
        "name": "account",
        "type": "core::starknet::contract_address::ContractAddress"
      }
    ]
  },
  {
    "kind": "enum",
    "name": "openzeppelin_security::pausable::PausableComponent::Event",
    "type": "event",
    "variants": [
      {
        "kind": "nested",
        "name": "Paused",
        "type": "openzeppelin_security::pausable::PausableComponent::Paused"
      },
      {
        "kind": "nested",
        "name": "Unpaused",
        "type": "openzeppelin_security::pausable::PausableComponent::Unpaused"
      }
    ]
  },
  {
    "kind": "enum",
    "name": "strkfarm_contracts::components::common::CommonComp::Event",
    "type": "event",
    "variants": []
  },
  {
    "kind": "struct",
    "name": "strkfarm_contracts::components::harvester::reward_shares::RewardShareComponent::Rewards",
    "type": "event",
    "members": [
      {
        "kind": "data",
        "name": "index",
        "type": "core::integer::u32"
      },
      {
        "kind": "data",
        "name": "info",
        "type": "strkfarm_contracts::components::harvester::reward_shares::RewardsInfo"
      },
      {
        "kind": "data",
        "name": "total_reward_shares",
        "type": "core::integer::u128"
      },
      {
        "kind": "data",
        "name": "timestamp",
        "type": "core::integer::u64"
      }
    ]
  },
  {
    "kind": "struct",
    "name": "strkfarm_contracts::components::harvester::reward_shares::RewardShareComponent::UserRewards",
    "type": "event",
    "members": [
      {
        "kind": "key",
        "name": "user",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "kind": "data",
        "name": "info",
        "type": "strkfarm_contracts::components::harvester::reward_shares::UserRewardsInfo"
      },
      {
        "kind": "data",
        "name": "total_reward_shares",
        "type": "core::integer::u128"
      },
      {
        "kind": "data",
        "name": "timestamp",
        "type": "core::integer::u64"
      }
    ]
  },
  {
    "kind": "enum",
    "name": "strkfarm_contracts::components::harvester::reward_shares::RewardShareComponent::Event",
    "type": "event",
    "variants": [
      {
        "kind": "nested",
        "name": "Rewards",
        "type": "strkfarm_contracts::components::harvester::reward_shares::RewardShareComponent::Rewards"
      },
      {
        "kind": "nested",
        "name": "UserRewards",
        "type": "strkfarm_contracts::components::harvester::reward_shares::RewardShareComponent::UserRewards"
      }
    ]
  },
  {
    "kind": "struct",
    "name": "strkfarm_contracts::strategies::cl_vault::cl_vault::ConcLiquidityVault::Deposit",
    "type": "event",
    "members": [
      {
        "kind": "key",
        "name": "sender",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "kind": "key",
        "name": "owner",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "kind": "data",
        "name": "assets",
        "type": "core::integer::u256"
      },
      {
        "kind": "data",
        "name": "shares",
        "type": "core::integer::u256"
      }
    ]
  },
  {
    "kind": "struct",
    "name": "strkfarm_contracts::strategies::cl_vault::cl_vault::ConcLiquidityVault::Withdraw",
    "type": "event",
    "members": [
      {
        "kind": "key",
        "name": "sender",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "kind": "key",
        "name": "receiver",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "kind": "key",
        "name": "owner",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "kind": "data",
        "name": "assets",
        "type": "core::integer::u256"
      },
      {
        "kind": "data",
        "name": "shares",
        "type": "core::integer::u256"
      }
    ]
  },
  {
    "kind": "struct",
    "name": "strkfarm_contracts::strategies::cl_vault::cl_vault::ConcLiquidityVault::Rebalance",
    "type": "event",
    "members": [
      {
        "kind": "data",
        "name": "old_bounds",
        "type": "strkfarm_contracts::interfaces::IEkuboCore::Bounds"
      },
      {
        "kind": "data",
        "name": "old_liquidity",
        "type": "core::integer::u256"
      },
      {
        "kind": "data",
        "name": "new_bounds",
        "type": "strkfarm_contracts::interfaces::IEkuboCore::Bounds"
      },
      {
        "kind": "data",
        "name": "new_liquidity",
        "type": "core::integer::u256"
      }
    ]
  },
  {
    "kind": "struct",
    "name": "strkfarm_contracts::strategies::cl_vault::cl_vault::ConcLiquidityVault::HandleFees",
    "type": "event",
    "members": [
      {
        "kind": "data",
        "name": "token0_addr",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "kind": "data",
        "name": "token0_origin_bal",
        "type": "core::integer::u256"
      },
      {
        "kind": "data",
        "name": "token0_deposited",
        "type": "core::integer::u256"
      },
      {
        "kind": "data",
        "name": "token1_addr",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "kind": "data",
        "name": "token1_origin_bal",
        "type": "core::integer::u256"
      },
      {
        "kind": "data",
        "name": "token1_deposited",
        "type": "core::integer::u256"
      }
    ]
  },
  {
    "kind": "struct",
    "name": "strkfarm_contracts::strategies::cl_vault::interface::FeeSettings",
    "type": "event",
    "members": [
      {
        "kind": "data",
        "name": "fee_bps",
        "type": "core::integer::u256"
      },
      {
        "kind": "data",
        "name": "fee_collector",
        "type": "core::starknet::contract_address::ContractAddress"
      }
    ]
  },
  {
    "kind": "struct",
    "name": "strkfarm_contracts::strategies::cl_vault::cl_vault::ConcLiquidityVault::HarvestEvent",
    "type": "event",
    "members": [
      {
        "kind": "key",
        "name": "rewardToken",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "kind": "data",
        "name": "rewardAmount",
        "type": "core::integer::u256"
      },
      {
        "kind": "key",
        "name": "token0",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "kind": "data",
        "name": "token0Amount",
        "type": "core::integer::u256"
      },
      {
        "kind": "key",
        "name": "token1",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "kind": "data",
        "name": "token1Amount",
        "type": "core::integer::u256"
      }
    ]
  },
  {
    "kind": "enum",
    "name": "strkfarm_contracts::strategies::cl_vault::cl_vault::ConcLiquidityVault::Event",
    "type": "event",
    "variants": [
      {
        "kind": "flat",
        "name": "ReentrancyGuardEvent",
        "type": "openzeppelin_security::reentrancyguard::ReentrancyGuardComponent::Event"
      },
      {
        "kind": "flat",
        "name": "ERC20Event",
        "type": "openzeppelin_token::erc20::erc20::ERC20Component::Event"
      },
      {
        "kind": "flat",
        "name": "SRC5Event",
        "type": "openzeppelin_introspection::src5::SRC5Component::Event"
      },
      {
        "kind": "flat",
        "name": "UpgradeableEvent",
        "type": "openzeppelin_upgrades::upgradeable::UpgradeableComponent::Event"
      },
      {
        "kind": "flat",
        "name": "PausableEvent",
        "type": "openzeppelin_security::pausable::PausableComponent::Event"
      },
      {
        "kind": "flat",
        "name": "CommonCompEvent",
        "type": "strkfarm_contracts::components::common::CommonComp::Event"
      },
      {
        "kind": "flat",
        "name": "RewardShareEvent",
        "type": "strkfarm_contracts::components::harvester::reward_shares::RewardShareComponent::Event"
      },
      {
        "kind": "nested",
        "name": "Deposit",
        "type": "strkfarm_contracts::strategies::cl_vault::cl_vault::ConcLiquidityVault::Deposit"
      },
      {
        "kind": "nested",
        "name": "Withdraw",
        "type": "strkfarm_contracts::strategies::cl_vault::cl_vault::ConcLiquidityVault::Withdraw"
      },
      {
        "kind": "nested",
        "name": "Rebalance",
        "type": "strkfarm_contracts::strategies::cl_vault::cl_vault::ConcLiquidityVault::Rebalance"
      },
      {
        "kind": "nested",
        "name": "HandleFees",
        "type": "strkfarm_contracts::strategies::cl_vault::cl_vault::ConcLiquidityVault::HandleFees"
      },
      {
        "kind": "nested",
        "name": "FeeSettings",
        "type": "strkfarm_contracts::strategies::cl_vault::interface::FeeSettings"
      },
      {
        "kind": "nested",
        "name": "Harvest",
        "type": "strkfarm_contracts::strategies::cl_vault::cl_vault::ConcLiquidityVault::HarvestEvent"
      }
    ]
  }
]